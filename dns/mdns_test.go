package dns

import (
	"fmt"
	"net"
	"syscall"
	"testing"

	"github.com/irai/packet"
)

var ptrMessage = []byte{
	// sudo tcpdump -v -XX -t
	// IP 192.168.0.3.mdns > 224.0.0.251.mdns: 0 [2q] [1au] PTR (QU)? _companion-link._tcp.local. PTR (QU)? _sleep-proxy._udp.local. (97)
	0x45, 0x00, 0x00, 0x7d, 0x3f, 0x57, 0x00, 0x00, 0xff, 0x11, 0xda, 0x71, 0xc0, 0xa8, 0x00, 0x03, // E..}?W.....q....
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x69, 0xac, 0x4e, 0x00, 0x00, 0x00, 0x00, // .........i.N....
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, // ........._compan
	0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, // ion-link._tcp.lo
	0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x80, 0x01, 0x0c, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x2d, // cal......_sleep-
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x04, 0x5f, 0x75, 0x64, 0x70, 0xc0, 0x21, 0x00, 0x0c, 0x80, 0x01, // proxy._udp.!....
	0x00, 0x00, 0x29, 0x05, 0xa0, 0x00, 0x00, 0x11, 0x94, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, // ..).............
	0x03, 0xa6, 0xb1, 0x53, 0xea, 0x1f, 0x40, 0x84, 0xb1, 0x53, 0xea, 0x1f, 0x40, // ...S..@..S..@
}

func TestMDNSHandler_PTR(t *testing.T) {
	session := packet.NewSession()
	dnsHandler, _ := New(session)
	Debug = true

	ip := packet.IP4(ptrMessage)
	fmt.Println("ip", ip)
	udp := packet.UDP(ip.Payload())
	fmt.Println("udp", udp)
	p := DNS(udp.Payload())
	if p.IsValid() != nil {
		t.Fatal("invalid dns packet")
	}
	fmt.Println("dns", p)

	ipv4Host, ipv6Host, err := dnsHandler.ProcessMDNS(nil, nil, udp.Payload())
	if err != nil {
		t.Error("unexpected error", err)
	}
	if ipv4Host[0].NameEntry.Name != "" || ipv6Host != nil {
		t.Error("unexpected name", ipv4Host[0].NameEntry.Name, ipv6Host[0].NameEntry.Name)
	}
}

// Sonos Play 3 packet
// b8:e9:37:52:4e:2c > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 108: (tos 0x0, ttl 255, id 0, offset 0, flags [DF], proto UDP (17), length 94)
// 192.168.0.101.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 1/0/0 _services._dns-sd._udp.local. [1h15m] PTR _sonos._tcp.local. (66)
var sonosResponse1 = []byte{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x08, 0x00, //ether packet
	0x45, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x40, 0x00, 0xff, 0x11, 0xd9, 0x85, 0xc0, 0xa8, 0x00, 0x65, //  E..^..@........e
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x4a, 0x89, 0x78, 0x00, 0x00, 0x84, 0x00, //  .........J.x....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, //  ........._servic
	0x65, 0x73, 0x07, 0x5f, 0x64, 0x6e, 0x73, 0x2d, 0x73, 0x64, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x05, //  es._dns-sd._udp.
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x0e, //  local...........
	0x06, 0x5f, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x04, 0x5f, 0x74, 0x63, 0x70, 0xc0, 0x23, //  ._sonos._tcp.#
}

// b8:e9:37:52:4e:2c > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 422: (tos 0x0, ttl 1, id 0, offset 0, flags [DF], proto UDP (17), length 408)
// 192.168.0.101.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 1/0/4 _services._dns-sd._udp.local. [2m] PTR _spotify-connect._tcp.local.
// ar:
// _spotify-connect._tcp.local. [2m] PTR sonosB8E937524E2C._spotify-connect._tcp.local.,
// sonosB8E937524E2C._spotify-connect._tcp.local. (Cache flush) [1h15m] TXT "VERSION=1.0" "CPath=/spotifyzc",
// sonosB8E937524E2C._spotify-connect._tcp.local. (Cache flush) [2m] SRV sonosB8E937524E2C.local.:1400 0 0,
// sonosB8E937524E2C.local. (Cache flush) [2m] A 192.168.0.101 (380)
var sonosResponse2 = []byte{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x08, 0x00, //ether packet
	0x45, 0x00, 0x01, 0x98, 0x00, 0x00, 0x40, 0x00, 0x01, 0x11, 0xd6, 0x4c, 0xc0, 0xa8, 0x00, 0x65, //  E.....@....L...e
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x01, 0x84, 0xcb, 0x5e, 0x00, 0x00, 0x84, 0x00, //  ...........^....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, //  ........._servic
	0x65, 0x73, 0x07, 0x5f, 0x64, 0x6e, 0x73, 0x2d, 0x73, 0x64, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x05, //  es._dns-sd._udp.
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x1d, //  local........x..
	0x10, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, //  ._spotify-connec
	0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x10, 0x5f, 0x73, //  t._tcp.local.._s
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, //  potify-connect._
	0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, //  tcp.local.......
	0x00, 0x78, 0x00, 0x2f, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, //  .x./.sonosB8E937
	0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0x10, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, //  524E2C._spotify-
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, //  connect._tcp.loc
	0x61, 0x6c, 0x00, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, 0x35, //  al..sonosB8E9375
	0x32, 0x34, 0x45, 0x32, 0x43, 0x10, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, //  24E2C._spotify-c
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, //  onnect._tcp.loca
	0x6c, 0x00, 0x00, 0x10, 0x80, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x1d, 0x0b, 0x56, 0x45, 0x52, //  l............VER
	0x53, 0x49, 0x4f, 0x4e, 0x3d, 0x31, 0x2e, 0x30, 0x10, 0x43, 0x50, 0x61, 0x74, 0x68, 0x3d, 0x2f, //  SION=1.0.CPath=/
	0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x7a, 0x63, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, //  spotifyzc.sonosB
	0x38, 0x45, 0x39, 0x33, 0x37, 0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0x10, 0x5f, 0x73, 0x70, 0x6f, //  8E937524E2C._spo
	0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, 0x74, 0x63, //  tify-connect._tc
	0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x21, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, //  p.local..!.....x
	0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x78, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, //  .......x.sonosB8
	0x45, 0x39, 0x33, 0x37, 0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, //  E937524E2C.local
	0x00, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, 0x35, 0x32, 0x34, //  ..sonosB8E937524
	0x45, 0x32, 0x43, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, //  E2C.local.......
	0x00, 0x78, 0x00, 0x04, 0xc0, 0xa8, 0x00, 0x65, //  .x.....e
}

// sudo tcpdump -en -v -XX -t port 5353
// b8:e9:37:52:4e:2c > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 284: (tos 0x0, ttl 255, id 0, offset 0, flags [DF], proto UDP (17), length 270)
// 192.168.0.101.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 1/0/5
// _sonos._tcp.local. PTR Sonos-B8E937524E2C._sonos._tcp.local.
// ar:
// Sonos-B8E937524E2C._sonos._tcp.local. (Cache flush) TXT "info=/api/v1/players/RINCON_B8E937524E2C01400/info" "vers=1" "protovers=1.18.9",
// Sonos-B8E937524E2C._sonos._tcp.local. (Cache flush) SRV Sonos-B8E937524E2C.local.:1443 0 0,
// Sonos-B8E937524E2C.local. (Cache flush) A 192.168.0.101,
// Sonos-B8E937524E2C._sonos._tcp.local. (Cache flush) NSEC,
// Sonos-B8E937524E2C.local. (Cache flush) NSEC (242)
var sonosResponse3 = []byte{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x08, 0x00, //ether packet
	0x45, 0x00, 0x01, 0x0e, 0x00, 0x00, 0x40, 0x00, 0xff, 0x11, 0xd8, 0xd5, 0xc0, 0xa8, 0x00, 0x65, //  E.....@........e
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0xfa, 0x07, 0x1a, 0x00, 0x00, 0x84, 0x00, //  ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x06, 0x5f, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x04, //  ........._sonos.
	0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, //  _tcp.local......
	0x00, 0x11, 0x94, 0x00, 0x15, 0x12, 0x53, 0x6f, 0x6e, 0x6f, 0x73, 0x2d, 0x42, 0x38, 0x45, 0x39, //  ......Sonos-B8E9
	0x33, 0x37, 0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0xc0, 0x0c, 0xc0, 0x29, 0x00, 0x10, 0x80, 0x01, //  37524E2C...)....
	0x00, 0x00, 0x11, 0x94, 0x00, 0x4b, 0x32, 0x69, 0x6e, 0x66, 0x6f, 0x3d, 0x2f, 0x61, 0x70, 0x69, //  .....K2info=/api
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x52, 0x49, 0x4e, 0x43, //  /v1/players/RINC
	0x4f, 0x4e, 0x5f, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, 0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0x30, //  ON_B8E937524E2C0
	0x31, 0x34, 0x30, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x06, 0x76, 0x65, 0x72, 0x73, 0x3d, 0x31, //  1400/info.vers=1
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x3d, 0x31, 0x2e, 0x31, 0x38, 0x2e, //  .protovers=1.18.
	0x39, 0xc0, 0x29, 0x00, 0x21, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x1b, 0x00, 0x00, 0x00, //  9.).!.....x.....
	0x00, 0x05, 0xa3, 0x12, 0x53, 0x6f, 0x6e, 0x6f, 0x73, 0x2d, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, //  ....Sonos-B8E937
	0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0xc0, 0x18, 0xc0, 0xa7, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, //  524E2C..........
	0x00, 0x78, 0x00, 0x04, 0xc0, 0xa8, 0x00, 0x65, 0xc0, 0x29, 0x00, 0x2f, 0x80, 0x01, 0x00, 0x00, //  .x.....e.)./....
	0x11, 0x94, 0x00, 0x09, 0xc0, 0x29, 0x00, 0x05, 0x00, 0x00, 0x80, 0x00, 0x40, 0xc0, 0xa7, 0x00, //  .....)......@...
	0x2f, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x05, 0xc0, 0xa7, 0x00, 0x01, 0x40, //  /.....x......@
}

func TestMDNSHandler_Sonos(t *testing.T) {
	session := packet.NewSession()
	dnsHandler, _ := New(session)
	Debug = true

	tests := []struct {
		name         string
		frame        []byte
		wantIPv4Host NameEntry
		wantIPv6Host NameEntry
		wantErr      bool
	}{
		{name: "sonos1", frame: sonosResponse1, wantErr: false,
			wantIPv4Host: NameEntry{},
		},
		{name: "sonos2", frame: sonosResponse2, wantErr: false,
			wantIPv4Host: NameEntry{Name: "sonosB8E937524E2C", Addr: packet.Addr{IP: net.IPv4(192, 168, 0, 101)}},
		},
		{name: "sonos3", frame: sonosResponse3, wantErr: false,
			wantIPv4Host: NameEntry{Name: "Sonos-B8E937524E2C", Addr: packet.Addr{IP: net.IPv4(192, 168, 0, 101)}},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ether := packet.Ether(tt.frame)
			ip := packet.IP4(ether.Payload())
			fmt.Println("ip", ip)
			udp := packet.UDP(ip.Payload())
			fmt.Println("udp", udp)
			p := DNS(udp.Payload())
			if p.IsValid() != nil {
				t.Fatal("invalid dns packet")
			}
			fmt.Println("dns", p)

			ipv4Host, _, err := dnsHandler.ProcessMDNS(nil, ether, udp.Payload())
			if (err != nil) != tt.wantErr {
				t.Error("unexpected error", err)
			}
			if tt.wantIPv4Host.Name == "" && len(ipv4Host) > 0 {
				t.Errorf("%s: unexpected ipv4=%s want=%s", tt.name, ipv4Host[0].NameEntry.Name, tt.wantIPv4Host.Name)
			}
			if len(ipv4Host) > 0 && ipv4Host[0].NameEntry.Name != tt.wantIPv4Host.Name {
				t.Errorf("%s: unexpected mdnsname=%s want=%s", tt.name, ipv4Host[0].NameEntry.Name, tt.wantIPv4Host.Name)
			}
			if len(ipv4Host) > 0 && !ipv4Host[0].Addr.IP.Equal(tt.wantIPv4Host.Addr.IP) {
				t.Errorf("%s: unexpected ip=%s want=%s", tt.name, ipv4Host[0].Addr.IP, tt.wantIPv4Host.Addr.IP)
			}
		})
	}
}

// sudo tcpdump -en -v -XX -t port 5353
// 8c:85:90:ae:ab:fc > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 533: (tos 0x0, ttl 255, id 55143, offset 0, flags [none], proto UDP (17), length 519)
// 192.168.0.110.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 9/0/6 Goth._device-info._tcp.local. TXT "model=MacBookPro14,1" "osxvers=20" "ecolor=157,157,160", Goth._osc._udp.local. (Cache flush) TXT "AppleLogic=LogicProX" "mfk=1", _services._dns-sd._udp.local. PTR _osc._udp.local., _osc._udp.local. PTR Goth._osc._udp.local., 3hhn4qluf9wvx._apple-lgremote._tcp.local. (Cache flush) TXT "/hostType=0" "/protocolVersion=8" "_d=Goth", _services._dns-sd._udp.local. PTR _apple-lgremote._tcp.local., _apple-lgremote._tcp.local. PTR 3hhn4qluf9wvx._apple-lgremote._tcp.local., Goth._osc._udp.local. (Cache flush) SRV Goth.local.:7000 0 0, 3hhn4qluf9wvx._apple-lgremote._tcp.local. (Cache flush) SRV Goth.local.:53936 0 0 ar: Goth.local. (Cache flush) AAAA fe80::4ba:e168:7b49:7bea, Goth.local. (Cache flush) AAAA 2001:4479:1901:ab02:14ba:6685:d42e:32b1, Goth.local. (Cache flush) A 192.168.0.110, Goth.local. (Cache flush) NSEC, Goth._osc._udp.local. (Cache flush) NSEC, 3hhn4qluf9wvx._apple-lgremote._tcp.local. (Cache flush) NSEC (491)
var frameMacBook = []byte{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x08, 0x00, //ether packet
	0x45, 0x00, 0x02, 0x07, 0xd7, 0x67, 0x00, 0x00, 0xff, 0x11, 0x40, 0x6c, 0xc0, 0xa8, 0x00, 0x6e, // E....g....@l...n
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x01, 0xf3, 0x30, 0x05, 0x00, 0x00, 0x84, 0x00, // ..........0.....
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x06, 0x04, 0x47, 0x6f, 0x74, 0x68, 0x0c, 0x5f, 0x64, // .........Goth._d
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, // evice-info._tcp.
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x33, // local..........3
	0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3d, 0x4d, 0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, // .model=MacBookPr
	0x6f, 0x31, 0x34, 0x2c, 0x31, 0x0a, 0x6f, 0x73, 0x78, 0x76, 0x65, 0x72, 0x73, 0x3d, 0x32, 0x30, // o14,1.osxvers=20
	0x12, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3d, 0x31, 0x35, 0x37, 0x2c, 0x31, 0x35, 0x37, 0x2c, // .ecolor=157,157,
	0x31, 0x36, 0x30, 0x04, 0x47, 0x6f, 0x74, 0x68, 0x04, 0x5f, 0x6f, 0x73, 0x63, 0x04, 0x5f, 0x75, // 160.Goth._osc._u
	0x64, 0x70, 0xc0, 0x23, 0x00, 0x10, 0x80, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x1b, 0x14, 0x41, // dp.#...........A
	0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x3d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, // ppleLogic=LogicP
	0x72, 0x6f, 0x58, 0x05, 0x6d, 0x66, 0x6b, 0x3d, 0x31, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, // roX.mfk=1._servi
	0x63, 0x65, 0x73, 0x07, 0x5f, 0x64, 0x6e, 0x73, 0x2d, 0x73, 0x64, 0xc0, 0x71, 0x00, 0x0c, 0x00, // ces._dns-sd.q...
	0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x02, 0xc0, 0x6c, 0xc0, 0x6c, 0x00, 0x0c, 0x00, 0x01, 0x00, // ........l.l.....
	0x00, 0x11, 0x94, 0x00, 0x02, 0xc0, 0x67, 0x0d, 0x33, 0x68, 0x68, 0x6e, 0x34, 0x71, 0x6c, 0x75, // ......g.3hhn4qlu
	0x66, 0x39, 0x77, 0x76, 0x78, 0x0f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2d, 0x6c, 0x67, 0x72, // f9wvx._apple-lgr
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0xc0, 0x1e, 0x00, 0x10, 0x80, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, // emote...........
	0x27, 0x0b, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3d, 0x30, 0x12, 0x2f, 0x70, // './hostType=0./p
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x38, // rotocolVersion=8
	0x07, 0x5f, 0x64, 0x3d, 0x47, 0x6f, 0x74, 0x68, 0xc0, 0x9d, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, // ._d=Goth........
	0x11, 0x94, 0x00, 0x02, 0xc0, 0xd9, 0xc0, 0xd9, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x11, 0x94, // ................
	0x00, 0x02, 0xc0, 0xcb, 0xc0, 0x67, 0x00, 0x21, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x0d, // .....g.!.....x..
	0x00, 0x00, 0x00, 0x00, 0x1b, 0x58, 0x04, 0x47, 0x6f, 0x74, 0x68, 0xc0, 0x23, 0xc0, 0xcb, 0x00, // .....X.Goth.#...
	0x21, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0xd2, 0xb0, 0xc1, // !.....x.........
	0x4a, 0xc1, 0x4a, 0x00, 0x1c, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x10, 0xfe, 0x80, 0x00, // J.J.......x.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xba, 0xe1, 0x68, 0x7b, 0x49, 0x7b, 0xea, 0xc1, 0x4a, 0x00, // ........h{I{..J.
	0x1c, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x10, 0x20, 0x01, 0x44, 0x79, 0x19, 0x01, 0xab, // ......x....Dy...
	0x02, 0x14, 0xba, 0x66, 0x85, 0xd4, 0x2e, 0x32, 0xb1, 0xc1, 0x4a, 0x00, 0x01, 0x80, 0x01, 0x00, // ...f...2..J.....
	0x00, 0x00, 0x78, 0x00, 0x04, 0xc0, 0xa8, 0x00, 0x6e, 0xc1, 0x4a, 0x00, 0x2f, 0x80, 0x01, 0x00, // ..x.....n.J./...
	0x00, 0x00, 0x78, 0x00, 0x08, 0xc1, 0x4a, 0x00, 0x04, 0x40, 0x00, 0x00, 0x08, 0xc0, 0x67, 0x00, // ..x...J..@....g.
	0x2f, 0x80, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x09, 0xc0, 0x67, 0x00, 0x05, 0x00, 0x00, 0x80, // /.........g.....
	0x00, 0x40, 0xc0, 0xcb, 0x00, 0x2f, 0x80, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x09, 0xc0, 0xcb, // .@.../..........
	0x00, 0x05, 0x00, 0x00, 0x80, 0x00, 0x40, // ......@
}

// sudo tcpdump -en -v -XX -t port 5353
// 34:a3:95:d8:13:39 > 33:33:00:00:00:fb, ethertype IPv6 (0x86dd), length 174: (flowlabel 0x58dda, hlim 255, next-header UDP (17) payload length: 120)
// fe80::18c6:775e:333e:9b92.5353 > ff02::fb.5353: [udp sum ok] 0 [3q] [1au] PTR (QM)?
//  _companion-link._tcp.local. PTR (QM)? _homekit._tcp.local. PTR (QM)? _sleep-proxy._udp.local. ar: . OPT UDPsize=1440 (112)
var frameIphoneIPv6Query = []byte{
	0x33, 0x33, 0x00, 0x00, 0x00, 0xfb, 0x34, 0xa3, 0x95, 0xd8, 0x13, 0x39, 0x86, 0xdd, 0x60, 0x05, // 33....4....9..`.
	0x8d, 0xda, 0x00, 0x78, 0x11, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xc6, // ...x............
	0x77, 0x5e, 0x33, 0x3e, 0x9b, 0x92, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // w^3>............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x78, 0x3f, 0x90, 0x00, 0x00, // ...........x?...
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, // ..........._comp
	0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, // anion-link._tcp.
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x08, 0x5f, 0x68, 0x6f, 0x6d, 0x65, // local......_home
	0x6b, 0x69, 0x74, 0xc0, 0x1c, 0x00, 0x0c, 0x00, 0x01, 0x0c, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, // kit......._sleep
	0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x04, 0x5f, 0x75, 0x64, 0x70, 0xc0, 0x21, 0x00, 0x0c, 0x00, // -proxy._udp.!...
	0x01, 0x00, 0x00, 0x29, 0x05, 0xa0, 0x00, 0x00, 0x11, 0x94, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, // ...)............
	0x00, 0xe4, 0x36, 0xa3, 0x95, 0xd8, 0x13, 0x39, 0x34, 0xa3, 0x95, 0xd8, 0x13, 0x39, // ..6....94....9
}

// sudo tcpdump -en -v -XX -t port 5353
// dc:21:5c:3e:c9:f7 > 33:33:00:00:00:fb, ethertype IPv6 (0x86dd), length 195: (flowlabel 0xd8d70, hlim 1, next-header UDP (17) payload length: 141)
// fe80::39bf:3f00:d0cf:bab5.5353 > ff02::fb.5353: [udp sum ok]
//   0*- [0q] 4/0/0 DESKTOP-EQ0BFB7.local. AAAA 2001:4479:a00:e802:39bf:3f00:d0cf:bab5,
//                  DESKTOP-EQ0BFB7.local. AAAA 2001:4479:a00:e802:912a:70cf:9ac9:67f7,
//                  DESKTOP-EQ0BFB7.local. AAAA fe80::39bf:3f00:d0cf:bab5,
//                  DESKTOP-EQ0BFB7.local. A 192.168.0.103 (133)
var frameWindows10AnnouncementIP6 = []byte{
	0x33, 0x33, 0x00, 0x00, 0x00, 0xfb, 0xdc, 0x21, 0x5c, 0x3e, 0xc9, 0xf7, 0x86, 0xdd, 0x60, 0x0d, // 33.....!\>....`.
	0x8d, 0x70, 0x00, 0x8d, 0x11, 0x01, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xbf, // .p............9.
	0x3f, 0x00, 0xd0, 0xcf, 0xba, 0xb5, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ?...............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x8d, 0x12, 0x14, 0x00, 0x00, // ................
	0x84, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x44, 0x45, 0x53, 0x4b, 0x54, // ...........DESKT
	0x4f, 0x50, 0x2d, 0x45, 0x51, 0x30, 0x42, 0x46, 0x42, 0x37, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, // OP-EQ0BFB7.local
	0x00, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x10, 0x20, 0x01, 0x44, 0x79, 0x0a, // ........<....Dy.
	0x00, 0xe8, 0x02, 0x39, 0xbf, 0x3f, 0x00, 0xd0, 0xcf, 0xba, 0xb5, 0xc0, 0x0c, 0x00, 0x1c, 0x00, // ...9.?..........
	0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x10, 0x20, 0x01, 0x44, 0x79, 0x0a, 0x00, 0xe8, 0x02, 0x91, // ....<....Dy.....
	0x2a, 0x70, 0xcf, 0x9a, 0xc9, 0x67, 0xf7, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, // *p...g..........
	0x3c, 0x00, 0x10, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xbf, 0x3f, 0x00, 0xd0, // <..........9.?..
	0xcf, 0xba, 0xb5, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x04, 0xc0, // ............<...
	0xa8, 0x00, 0x67, // ..g
}

// sudo tcpdump -en -v -XX -t port 5353
// dc:21:5c:3e:c9:f7 > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 175: (tos 0x0, ttl 1, id 3661, offset 0, flags [none], proto UDP (17), length 161)
// 192.168.0.103.5353 > 224.0.0.251.5353:
//   0*- [0q] 4/0/0 DESKTOP-EQ0BFB7.local. AAAA 2001:4479:a00:e802:39bf:3f00:d0cf:bab5,
//                  DESKTOP-EQ0BFB7.local. AAAA 2001:4479:a00:e802:912a:70cf:9ac9:67f7,
//                  DESKTOP-EQ0BFB7.local. AAAA fe80::39bf:3f00:d0cf:bab5,
//                  DESKTOP-EQ0BFB7.local. A 192.168.0.103 (133)
var frameWindows10AnnouncementiIP4 = []byte{
	0x01, 0x00, 0x5e, 0x00, 0x00, 0xfb, 0xdc, 0x21, 0x5c, 0x3e, 0xc9, 0xf7, 0x08, 0x00, 0x45, 0x00, // ..^....!\>....E.
	0x00, 0xa1, 0x0e, 0x4d, 0x00, 0x00, 0x01, 0x11, 0x08, 0xf5, 0xc0, 0xa8, 0x00, 0x67, 0xe0, 0x00, // ...M.........g..
	0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x8d, 0x72, 0xcc, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, // ........r.......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x45, // .......DESKTOP-E
	0x51, 0x30, 0x42, 0x46, 0x42, 0x37, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x1c, 0x00, // Q0BFB7.local....
	0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x10, 0x20, 0x01, 0x44, 0x79, 0x0a, 0x00, 0xe8, 0x02, 0x39, // ....<....Dy....9
	0xbf, 0x3f, 0x00, 0xd0, 0xcf, 0xba, 0xb5, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, // .?..............
	0x3c, 0x00, 0x10, 0x20, 0x01, 0x44, 0x79, 0x0a, 0x00, 0xe8, 0x02, 0x91, 0x2a, 0x70, 0xcf, 0x9a, // <....Dy.....*p..
	0xc9, 0x67, 0xf7, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x10, 0xfe, // .g..........<...
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xbf, 0x3f, 0x00, 0xd0, 0xcf, 0xba, 0xb5, 0xc0, // .......9.?......
	0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x04, 0xc0, 0xa8, 0x00, 0x67, // ........<.....g
}

func TestMDNSHandler_Apple(t *testing.T) {
	session := packet.NewSession()
	dnsHandler, _ := New(session)
	Debug = true

	tests := []struct {
		name         string
		frame        []byte
		wantIPv4Host NameEntry
		wantIPv6Host NameEntry
		wantErr      bool
	}{
		{name: "MacBook", frame: frameMacBook, wantErr: false,
			wantIPv4Host: NameEntry{Name: "Goth", Addr: packet.Addr{IP: net.IPv4(192, 168, 0, 110)}, Model: "MacBookPro14,1"},
		},
		{name: "iPhoneIpv6Query", frame: frameIphoneIPv6Query, wantErr: false,
			wantIPv4Host: NameEntry{Name: "", Addr: packet.Addr{}, Model: ""},
		},
		{name: "WindowsAnnouncement", frame: frameWindows10AnnouncementIP6, wantErr: false,
			wantIPv4Host: NameEntry{Name: "DESKTOP-EQ0BFB7", Addr: packet.Addr{IP: net.IPv4(192, 168, 0, 103)}, Model: ""},
		},
		{name: "WindowsAnnouncement", frame: frameWindows10AnnouncementiIP4, wantErr: false,
			wantIPv4Host: NameEntry{Name: "", Addr: packet.Addr{IP: net.IPv4(192, 168, 0, 103)}, Model: ""},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ether := packet.Ether(tt.frame)
			var ip4 packet.IP4
			var ip6 packet.IP6
			var payload []byte
			if ether.EtherType() == syscall.ETH_P_IP {
				ip4 = packet.IP4(ether.Payload())
				payload = ip4.Payload()
				fmt.Println("ip4", ip4)
			} else {
				ip6 = packet.IP6(ether.Payload())
				payload = ip6.Payload()
				fmt.Println("ip6", ip6)
			}
			udp := packet.UDP(payload)
			fmt.Println("udp", udp)
			p := DNS(udp.Payload())
			if p.IsValid() != nil {
				t.Fatal("invalid dns packet")
			}
			fmt.Println("dns", p)

			ipv4Host, _, err := dnsHandler.ProcessMDNS(nil, ether, udp.Payload())
			if (err != nil) != tt.wantErr {
				t.Error("unexpected error", err)
			}
			if tt.wantIPv4Host.Name != "" {
				if len(ipv4Host) <= 0 {
					t.Errorf("%s: unexpected ipv4host zero len=%d", tt.name, len(ipv4Host))
					return
				}
				if ipv4Host[0].NameEntry.Name != tt.wantIPv4Host.Name {
					t.Errorf("%s: unexpected mdnsname=%s want=%s", tt.name, ipv4Host[0].NameEntry.Name, tt.wantIPv4Host.Name)
				}
				if ipv4Host[0].NameEntry.Model != tt.wantIPv4Host.Model {
					t.Errorf("%s: unexpected model=%s want=%s", tt.name, ipv4Host[0].NameEntry.Model, tt.wantIPv4Host.Model)
				}
				if !ipv4Host[0].Addr.IP.Equal(tt.wantIPv4Host.Addr.IP) {
					t.Errorf("%s: unexpected ip=%s want=%s", tt.name, ipv4Host[0].Addr.IP, tt.wantIPv4Host.Addr.IP)
				}
			}
		})
	}
}
