package dns

import (
	"fmt"
	"testing"

	"github.com/irai/packet"
)

var ptrMessage = []byte{
	// IP 192.168.0.3.mdns > 224.0.0.251.mdns: 0 [2q] [1au] PTR (QU)? _companion-link._tcp.local. PTR (QU)? _sleep-proxy._udp.local. (97)
	0x45, 0x00, 0x00, 0x7d, 0x3f, 0x57, 0x00, 0x00, 0xff, 0x11, 0xda, 0x71, 0xc0, 0xa8, 0x00, 0x03, // E..}?W.....q....
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x69, 0xac, 0x4e, 0x00, 0x00, 0x00, 0x00, // .........i.N....
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, // ........._compan
	0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, // ion-link._tcp.lo
	0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x80, 0x01, 0x0c, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x2d, // cal......_sleep-
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x04, 0x5f, 0x75, 0x64, 0x70, 0xc0, 0x21, 0x00, 0x0c, 0x80, 0x01, // proxy._udp.!....
	0x00, 0x00, 0x29, 0x05, 0xa0, 0x00, 0x00, 0x11, 0x94, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, // ..).............
	0x03, 0xa6, 0xb1, 0x53, 0xea, 0x1f, 0x40, 0x84, 0xb1, 0x53, 0xea, 0x1f, 0x40, // ...S..@..S..@
}

func TestMDNSHandler_PTR(t *testing.T) {
	session := packet.NewEmptySession()
	dnsHandler, _ := New(session)
	Debug = true

	ip := packet.IP4(ptrMessage)
	fmt.Println("ip", ip)
	udp := packet.UDP(ip.Payload())
	fmt.Println("udp", udp)
	p := DNS(udp.Payload())
	if p.IsValid() != nil {
		t.Fatal("invalid dns packet")
	}
	fmt.Println("dns", p)

	hosts, err := dnsHandler.ProcessMDNS(nil, nil, udp.Payload())
	if err != nil {
		t.Error("unexpected error", err)
	}
	if n := len(hosts); n > 0 {
		t.Error("unexpected len", n)
	}
}

/***
var sonosResponse1 = []byte {
b8:e9:37:52:4e:2c > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 108: (tos 0x0, ttl 255, id 0, offset 0, flags [DF], proto UDP (17), length 94)
    192.168.0.101.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 1/0/0 _services._dns-sd._udp.local. [1h15m] PTR _sonos._tcp.local. (66)
        0x0000:  4500 005e 0000 4000 ff11 d985 c0a8 0065  E..^..@........e
        0x0010:  e000 00fb 14e9 14e9 004a 8978 0000 8400  .........J.x....
        0x0020:  0000 0001 0000 0000 095f 7365 7276 6963  ........._servic
        0x0030:  6573 075f 646e 732d 7364 045f 7564 7005  es._dns-sd._udp.
        0x0040:  6c6f 6361 6c00 000c 0001 0000 1194 000e  local...........
        0x0050:  065f 736f 6e6f 7304 5f74 6370 c023       ._sonos._tcp.#
}
var sonosResponse = []byte {
b8:e9:37:51:89:8c > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 108: (tos 0x0, ttl 255, id 0, offset 0, flags [DF], proto UDP (17), length 94)
    192.168.0.103.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 1/0/0 _services._dns-sd._udp.local. [1h15m] PTR _sonos._tcp.local. (66)
        0x0000:  4500 005e 0000 4000 ff11 d983 c0a8 0067  E..^..@........g
        0x0010:  e000 00fb 14e9 14e9 004a 8976 0000 8400  .........J.v....
        0x0020:  0000 0001 0000 0000 095f 7365 7276 6963  ........._servic
        0x0030:  6573 075f 646e 732d 7364 045f 7564 7005  es._dns-sd._udp.
        0x0040:  6c6f 6361 6c00 000c 0001 0000 1194 000e  local...........
        0x0050:  065f 736f 6e6f 7304 5f74 6370 c023       ._sonos._tcp.#
var sonosResponse = []byte {
b8:e9:37:52:4e:2c > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 422: (tos 0x0, ttl 1, id 0, offset 0, flags [DF], proto UDP (17), length 408)
    192.168.0.101.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 1/0/4 _services._dns-sd._udp.local. [2m] PTR _spotify-connect._tcp.local.
	ar:
	_spotify-connect._tcp.local. [2m] PTR sonosB8E937524E2C._spotify-connect._tcp.local.,
	sonosB8E937524E2C._spotify-connect._tcp.local. (Cache flush) [1h15m] TXT "VERSION=1.0" "CPath=/spotifyzc",
	sonosB8E937524E2C._spotify-connect._tcp.local. (Cache flush) [2m] SRV sonosB8E937524E2C.local.:1400 0 0,
	sonosB8E937524E2C.local. (Cache flush) [2m] A 192.168.0.101 (380)
        0x0000:  4500 0198 0000 4000 0111 d64c c0a8 0065  E.....@....L...e
        0x0010:  e000 00fb 14e9 14e9 0184 cb5e 0000 8400  ...........^....
        0x0020:  0000 0001 0000 0004 095f 7365 7276 6963  ........._servic
        0x0030:  6573 075f 646e 732d 7364 045f 7564 7005  es._dns-sd._udp.
        0x0040:  6c6f 6361 6c00 000c 0001 0000 0078 001d  local........x..
        0x0050:  105f 7370 6f74 6966 792d 636f 6e6e 6563  ._spotify-connec
        0x0060:  7404 5f74 6370 056c 6f63 616c 0010 5f73  t._tcp.local.._s
        0x0070:  706f 7469 6679 2d63 6f6e 6e65 6374 045f  potify-connect._
        0x0080:  7463 7005 6c6f 6361 6c00 000c 0001 0000  tcp.local.......
        0x0090:  0078 002f 1173 6f6e 6f73 4238 4539 3337  .x./.sonosB8E937
        0x00a0:  3532 3445 3243 105f 7370 6f74 6966 792d  524E2C._spotify-
        0x00b0:  636f 6e6e 6563 7404 5f74 6370 056c 6f63  connect._tcp.loc
        0x00c0:  616c 0011 736f 6e6f 7342 3845 3933 3735  al..sonosB8E9375
        0x00d0:  3234 4532 4310 5f73 706f 7469 6679 2d63  24E2C._spotify-c
        0x00e0:  6f6e 6e65 6374 045f 7463 7005 6c6f 6361  onnect._tcp.loca
        0x00f0:  6c00 0010 8001 0000 1194 001d 0b56 4552  l............VER
        0x0100:  5349 4f4e 3d31 2e30 1043 5061 7468 3d2f  SION=1.0.CPath=/
        0x0110:  7370 6f74 6966 797a 6311 736f 6e6f 7342  spotifyzc.sonosB
        0x0120:  3845 3933 3735 3234 4532 4310 5f73 706f  8E937524E2C._spo
        0x0130:  7469 6679 2d63 6f6e 6e65 6374 045f 7463  tify-connect._tc
        0x0140:  7005 6c6f 6361 6c00 0021 8001 0000 0078  p.local..!.....x
        0x0150:  001f 0000 0000 0578 1173 6f6e 6f73 4238  .......x.sonosB8
        0x0160:  4539 3337 3532 3445 3243 056c 6f63 616c  E937524E2C.local
        0x0170:  0011 736f 6e6f 7342 3845 3933 3735 3234  ..sonosB8E937524
        0x0180:  4532 4305 6c6f 6361 6c00 0001 8001 0000  E2C.local.......
        0x0190:  0078 0004 c0a8 0065                      .x.....e
*/
// b8:e9:37:51:89:8c > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 422: (tos 0x0, ttl 1, id 0, offset 0, flags [DF], proto UDP (17), length 408)
// 192.168.0.103.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 1/0/4
// _services._dns-sd._udp.local. [2m] PTR _spotify-connect._tcp.local.
// ar:
// _spotify-connect._tcp.local. [2m] PTR sonosB8E93751898C._spotify-connect._tcp.local.,
// sonosB8E93751898C._spotify-connect._tcp.local. (Cache flush) [1h15m] TXT "VERSION=1.0" "CPath=/spotifyzc",
// sonosB8E93751898C._spotify-connect._tcp.local. (Cache flush) [2m] SRV sonosB8E93751898C.local.:1400 0 0,
// sonosB8E93751898C.local. (Cache flush) [2m] A 192.168.0.103 (380)
var sonosResponse = []byte{
	0x45, 0x00, 0x01, 0x98, 0x00, 0x00, 0x40, 0x00, 0x01, 0x11, 0xd6, 0x4a, 0xc0, 0xa8, 0x00, 0x67, // E.....@....J...g
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x01, 0x84, 0xde, 0x56, 0x00, 0x00, 0x84, 0x00, // ...........V....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, // ........._servic
	0x65, 0x73, 0x07, 0x5f, 0x64, 0x6e, 0x73, 0x2d, 0x73, 0x64, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x05, // es._dns-sd._udp.
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x1d, // local........x..
	0x10, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, // ._spotify-connec
	0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x10, 0x5f, 0x73, // t._tcp.local.._s
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, // potify-connect._
	0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, // tcp.local.......
	0x00, 0x78, 0x00, 0x2f, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, // .x./.sonosB8E937
	0x35, 0x31, 0x38, 0x39, 0x38, 0x43, 0x10, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, // 51898C._spotify-
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, // connect._tcp.loc
	0x61, 0x6c, 0x00, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, 0x35, // al..sonosB8E9375
	0x31, 0x38, 0x39, 0x38, 0x43, 0x10, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, // 1898C._spotify-c
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, // onnect._tcp.loca
	0x6c, 0x00, 0x00, 0x10, 0x80, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x1d, 0x0b, 0x56, 0x45, 0x52, // l............VER
	0x53, 0x49, 0x4f, 0x4e, 0x3d, 0x31, 0x2e, 0x30, 0x10, 0x43, 0x50, 0x61, 0x74, 0x68, 0x3d, 0x2f, // SION=1.0.CPath=/
	0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x7a, 0x63, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, // spotifyzc.sonosB
	0x38, 0x45, 0x39, 0x33, 0x37, 0x35, 0x31, 0x38, 0x39, 0x38, 0x43, 0x10, 0x5f, 0x73, 0x70, 0x6f, // 8E93751898C._spo
	0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, 0x74, 0x63, // tify-connect._tc
	0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x21, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, // p.local..!.....x
	0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x78, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, // .......x.sonosB8
	0x45, 0x39, 0x33, 0x37, 0x35, 0x31, 0x38, 0x39, 0x38, 0x43, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, // E93751898C.local
	0x00, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, 0x35, 0x31, 0x38, // ..sonosB8E937518
	0x39, 0x38, 0x43, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, // 98C.local.......
	0x00, 0x78, 0x00, 0x04, 0xc0, 0xa8, 0x00, 0x67, // .x.....g
}

func TestMDNSHandler_Sonos(t *testing.T) {
	session := packet.NewEmptySession()
	dnsHandler, _ := New(session)
	Debug = true

	tests := []struct {
		name      string
		frame     []byte
		wantHosts []HostName
		wantErr   bool
	}{
		{name: "sonos4", frame: sonosResponse, wantHosts: []HostName{}, wantErr: false},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ip := packet.IP4(tt.frame)
			fmt.Println("ip", ip)
			udp := packet.UDP(ip.Payload())
			fmt.Println("udp", udp)
			p := DNS(udp.Payload())
			if p.IsValid() != nil {
				t.Fatal("invalid dns packet")
			}
			fmt.Println("dns", p)

			hosts, err := dnsHandler.ProcessMDNS(nil, nil, udp.Payload())
			if (err != nil) != tt.wantErr {
				t.Error("unexpected error", err)
			}
			if n := len(hosts); n > 0 {
				t.Error("unexpected len", n, hosts)
			}
			fmt.Println(hosts)
		})
	}
}
