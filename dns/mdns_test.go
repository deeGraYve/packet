package dns

import (
	"fmt"
	"testing"

	"github.com/irai/packet"
)

var ptrMessage = []byte{
	// IP 192.168.0.3.mdns > 224.0.0.251.mdns: 0 [2q] [1au] PTR (QU)? _companion-link._tcp.local. PTR (QU)? _sleep-proxy._udp.local. (97)
	0x45, 0x00, 0x00, 0x7d, 0x3f, 0x57, 0x00, 0x00, 0xff, 0x11, 0xda, 0x71, 0xc0, 0xa8, 0x00, 0x03, // E..}?W.....q....
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x69, 0xac, 0x4e, 0x00, 0x00, 0x00, 0x00, // .........i.N....
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, // ........._compan
	0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, // ion-link._tcp.lo
	0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x80, 0x01, 0x0c, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x2d, // cal......_sleep-
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x04, 0x5f, 0x75, 0x64, 0x70, 0xc0, 0x21, 0x00, 0x0c, 0x80, 0x01, // proxy._udp.!....
	0x00, 0x00, 0x29, 0x05, 0xa0, 0x00, 0x00, 0x11, 0x94, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, // ..).............
	0x03, 0xa6, 0xb1, 0x53, 0xea, 0x1f, 0x40, 0x84, 0xb1, 0x53, 0xea, 0x1f, 0x40, // ...S..@..S..@
}

func TestMDNSHandler_PTR(t *testing.T) {
	session := packet.NewEmptySession()
	dnsHandler, _ := New(session)
	Debug = true

	ip := packet.IP4(ptrMessage)
	fmt.Println("ip", ip)
	udp := packet.UDP(ip.Payload())
	fmt.Println("udp", udp)
	p := DNS(udp.Payload())
	if p.IsValid() != nil {
		t.Fatal("invalid dns packet")
	}
	fmt.Println("dns", p)

	hosts, err := dnsHandler.ProcessMDNS(nil, nil, udp.Payload())
	if err != nil {
		t.Error("unexpected error", err)
	}
	if n := len(hosts); n > 0 {
		t.Error("unexpected len", n)
	}
}
