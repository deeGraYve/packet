package dns

import (
	"fmt"
	"net"
	"testing"

	"github.com/irai/packet"
)

var ptrMessage = []byte{
	// IP 192.168.0.3.mdns > 224.0.0.251.mdns: 0 [2q] [1au] PTR (QU)? _companion-link._tcp.local. PTR (QU)? _sleep-proxy._udp.local. (97)
	0x45, 0x00, 0x00, 0x7d, 0x3f, 0x57, 0x00, 0x00, 0xff, 0x11, 0xda, 0x71, 0xc0, 0xa8, 0x00, 0x03, // E..}?W.....q....
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x69, 0xac, 0x4e, 0x00, 0x00, 0x00, 0x00, // .........i.N....
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, // ........._compan
	0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, // ion-link._tcp.lo
	0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x80, 0x01, 0x0c, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x2d, // cal......_sleep-
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x04, 0x5f, 0x75, 0x64, 0x70, 0xc0, 0x21, 0x00, 0x0c, 0x80, 0x01, // proxy._udp.!....
	0x00, 0x00, 0x29, 0x05, 0xa0, 0x00, 0x00, 0x11, 0x94, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, // ..).............
	0x03, 0xa6, 0xb1, 0x53, 0xea, 0x1f, 0x40, 0x84, 0xb1, 0x53, 0xea, 0x1f, 0x40, // ...S..@..S..@
}

func TestMDNSHandler_PTR(t *testing.T) {
	session := packet.NewEmptySession()
	dnsHandler, _ := New(session)
	Debug = true

	ip := packet.IP4(ptrMessage)
	fmt.Println("ip", ip)
	udp := packet.UDP(ip.Payload())
	fmt.Println("udp", udp)
	p := DNS(udp.Payload())
	if p.IsValid() != nil {
		t.Fatal("invalid dns packet")
	}
	fmt.Println("dns", p)

	hosts, err := dnsHandler.ProcessMDNS(nil, nil, udp.Payload())
	if err != nil {
		t.Error("unexpected error", err)
	}
	if n := len(hosts); n > 0 {
		t.Error("unexpected len", n)
	}
}

// Sonos Play 3 packet
// b8:e9:37:52:4e:2c > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 108: (tos 0x0, ttl 255, id 0, offset 0, flags [DF], proto UDP (17), length 94)
// 192.168.0.101.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 1/0/0 _services._dns-sd._udp.local. [1h15m] PTR _sonos._tcp.local. (66)
var sonosResponse1 = []byte{
	0x45, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x40, 0x00, 0xff, 0x11, 0xd9, 0x85, 0xc0, 0xa8, 0x00, 0x65, //  E..^..@........e
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x4a, 0x89, 0x78, 0x00, 0x00, 0x84, 0x00, //  .........J.x....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, //  ........._servic
	0x65, 0x73, 0x07, 0x5f, 0x64, 0x6e, 0x73, 0x2d, 0x73, 0x64, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x05, //  es._dns-sd._udp.
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x0e, //  local...........
	0x06, 0x5f, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x04, 0x5f, 0x74, 0x63, 0x70, 0xc0, 0x23, //  ._sonos._tcp.#
}

// b8:e9:37:52:4e:2c > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 422: (tos 0x0, ttl 1, id 0, offset 0, flags [DF], proto UDP (17), length 408)
// 192.168.0.101.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 1/0/4 _services._dns-sd._udp.local. [2m] PTR _spotify-connect._tcp.local.
// ar:
// _spotify-connect._tcp.local. [2m] PTR sonosB8E937524E2C._spotify-connect._tcp.local.,
// sonosB8E937524E2C._spotify-connect._tcp.local. (Cache flush) [1h15m] TXT "VERSION=1.0" "CPath=/spotifyzc",
// sonosB8E937524E2C._spotify-connect._tcp.local. (Cache flush) [2m] SRV sonosB8E937524E2C.local.:1400 0 0,
// sonosB8E937524E2C.local. (Cache flush) [2m] A 192.168.0.101 (380)
var sonosResponse2 = []byte{
	0x45, 0x00, 0x01, 0x98, 0x00, 0x00, 0x40, 0x00, 0x01, 0x11, 0xd6, 0x4c, 0xc0, 0xa8, 0x00, 0x65, //  E.....@....L...e
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x01, 0x84, 0xcb, 0x5e, 0x00, 0x00, 0x84, 0x00, //  ...........^....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, //  ........._servic
	0x65, 0x73, 0x07, 0x5f, 0x64, 0x6e, 0x73, 0x2d, 0x73, 0x64, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x05, //  es._dns-sd._udp.
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x1d, //  local........x..
	0x10, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, //  ._spotify-connec
	0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x10, 0x5f, 0x73, //  t._tcp.local.._s
	0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, //  potify-connect._
	0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, //  tcp.local.......
	0x00, 0x78, 0x00, 0x2f, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, //  .x./.sonosB8E937
	0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0x10, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, //  524E2C._spotify-
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, //  connect._tcp.loc
	0x61, 0x6c, 0x00, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, 0x35, //  al..sonosB8E9375
	0x32, 0x34, 0x45, 0x32, 0x43, 0x10, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, //  24E2C._spotify-c
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, //  onnect._tcp.loca
	0x6c, 0x00, 0x00, 0x10, 0x80, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x1d, 0x0b, 0x56, 0x45, 0x52, //  l............VER
	0x53, 0x49, 0x4f, 0x4e, 0x3d, 0x31, 0x2e, 0x30, 0x10, 0x43, 0x50, 0x61, 0x74, 0x68, 0x3d, 0x2f, //  SION=1.0.CPath=/
	0x73, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x7a, 0x63, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, //  spotifyzc.sonosB
	0x38, 0x45, 0x39, 0x33, 0x37, 0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0x10, 0x5f, 0x73, 0x70, 0x6f, //  8E937524E2C._spo
	0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04, 0x5f, 0x74, 0x63, //  tify-connect._tc
	0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x21, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, //  p.local..!.....x
	0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x78, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, //  .......x.sonosB8
	0x45, 0x39, 0x33, 0x37, 0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, //  E937524E2C.local
	0x00, 0x11, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, 0x35, 0x32, 0x34, //  ..sonosB8E937524
	0x45, 0x32, 0x43, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, //  E2C.local.......
	0x00, 0x78, 0x00, 0x04, 0xc0, 0xa8, 0x00, 0x65, //  .x.....e
}

// b8:e9:37:52:4e:2c > 01:00:5e:00:00:fb, ethertype IPv4 (0x0800), length 284: (tos 0x0, ttl 255, id 0, offset 0, flags [DF], proto UDP (17), length 270)
// 192.168.0.101.5353 > 224.0.0.251.5353: [udp sum ok] 0*- [0q] 1/0/5
// _sonos._tcp.local. PTR Sonos-B8E937524E2C._sonos._tcp.local.
// ar:
// Sonos-B8E937524E2C._sonos._tcp.local. (Cache flush) TXT "info=/api/v1/players/RINCON_B8E937524E2C01400/info" "vers=1" "protovers=1.18.9",
// Sonos-B8E937524E2C._sonos._tcp.local. (Cache flush) SRV Sonos-B8E937524E2C.local.:1443 0 0,
// Sonos-B8E937524E2C.local. (Cache flush) A 192.168.0.101,
// Sonos-B8E937524E2C._sonos._tcp.local. (Cache flush) NSEC,
// Sonos-B8E937524E2C.local. (Cache flush) NSEC (242)
var sonosResponse3 = []byte{
	0x45, 0x00, 0x01, 0x0e, 0x00, 0x00, 0x40, 0x00, 0xff, 0x11, 0xd8, 0xd5, 0xc0, 0xa8, 0x00, 0x65, //  E.....@........e
	0xe0, 0x00, 0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0xfa, 0x07, 0x1a, 0x00, 0x00, 0x84, 0x00, //  ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x06, 0x5f, 0x73, 0x6f, 0x6e, 0x6f, 0x73, 0x04, //  ........._sonos.
	0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, //  _tcp.local......
	0x00, 0x11, 0x94, 0x00, 0x15, 0x12, 0x53, 0x6f, 0x6e, 0x6f, 0x73, 0x2d, 0x42, 0x38, 0x45, 0x39, //  ......Sonos-B8E9
	0x33, 0x37, 0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0xc0, 0x0c, 0xc0, 0x29, 0x00, 0x10, 0x80, 0x01, //  37524E2C...)....
	0x00, 0x00, 0x11, 0x94, 0x00, 0x4b, 0x32, 0x69, 0x6e, 0x66, 0x6f, 0x3d, 0x2f, 0x61, 0x70, 0x69, //  .....K2info=/api
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x52, 0x49, 0x4e, 0x43, //  /v1/players/RINC
	0x4f, 0x4e, 0x5f, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, 0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0x30, //  ON_B8E937524E2C0
	0x31, 0x34, 0x30, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x06, 0x76, 0x65, 0x72, 0x73, 0x3d, 0x31, //  1400/info.vers=1
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x3d, 0x31, 0x2e, 0x31, 0x38, 0x2e, //  .protovers=1.18.
	0x39, 0xc0, 0x29, 0x00, 0x21, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x1b, 0x00, 0x00, 0x00, //  9.).!.....x.....
	0x00, 0x05, 0xa3, 0x12, 0x53, 0x6f, 0x6e, 0x6f, 0x73, 0x2d, 0x42, 0x38, 0x45, 0x39, 0x33, 0x37, //  ....Sonos-B8E937
	0x35, 0x32, 0x34, 0x45, 0x32, 0x43, 0xc0, 0x18, 0xc0, 0xa7, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, //  524E2C..........
	0x00, 0x78, 0x00, 0x04, 0xc0, 0xa8, 0x00, 0x65, 0xc0, 0x29, 0x00, 0x2f, 0x80, 0x01, 0x00, 0x00, //  .x.....e.)./....
	0x11, 0x94, 0x00, 0x09, 0xc0, 0x29, 0x00, 0x05, 0x00, 0x00, 0x80, 0x00, 0x40, 0xc0, 0xa7, 0x00, //  .....)......@...
	0x2f, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x05, 0xc0, 0xa7, 0x00, 0x01, 0x40, //  /.....x......@
}

func TestMDNSHandler_Sonos(t *testing.T) {
	session := packet.NewEmptySession()
	dnsHandler, _ := New(session)
	Debug = true

	tests := []struct {
		name      string
		frame     []byte
		wantHosts []HostName
		wantErr   bool
	}{
		{name: "sonos1", frame: sonosResponse1, wantErr: false,
			wantHosts: []HostName{},
		},
		{name: "sonos2", frame: sonosResponse2, wantErr: false,
			wantHosts: []HostName{{Name: "sonosB8E93751898C.local.", Addr: packet.Addr{IP: net.IPv4(192, 168, 0, 103)}}},
		},
		{name: "sonos3", frame: sonosResponse3, wantErr: false,
			wantHosts: []HostName{{Name: "sonosB8E93751898C.local.", Addr: packet.Addr{IP: net.IPv4(192, 168, 0, 103)}}},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ip := packet.IP4(tt.frame)
			fmt.Println("ip", ip)
			udp := packet.UDP(ip.Payload())
			fmt.Println("udp", udp)
			p := DNS(udp.Payload())
			if p.IsValid() != nil {
				t.Fatal("invalid dns packet")
			}
			fmt.Println("dns", p)

			hosts, err := dnsHandler.ProcessMDNS(nil, nil, udp.Payload())
			if (err != nil) != tt.wantErr {
				t.Error("unexpected error", err)
			}
			if n := len(hosts); n > len(tt.wantHosts) {
				t.Error("unexpected len", n, hosts)
			}
			fmt.Println(hosts)
		})
	}
}
